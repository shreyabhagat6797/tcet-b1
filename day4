'''
Find the True Equations
In this you have to give a list containing equations, with each equation written as a string. 
example:
["1+1=2", "2+2=3", "5*5=10", "3/3=1"]
If you do the math, you'll see that the equations "1+1=2" and "3/3=1" are actually true while "2+2=3" and "5*5=10" are false.
Write a function which, given a list of equations as above, returns only the true equations. 
For instance, for the example above the output should be:
["1+1=2", "3/3=1"]

Examples
true_equations(["2*2=4"]) ➞ ["2*2=4"]

true_equations(["1+1=3", "3-1=1"]) ➞ []

'''
'''def true_eqns(list1):
    true_list=[]
    for s in list1:
        eq=s.split("=")
        if eval(eq[0])==eval(eq[1]):
            true_list.append(s)
    return true_list

list1=["1+1=2", "2+2=3", "5*5=10", "3/3=1"]
print(true_eqns(list1))'''

'''
Write a python program to display all the common characters between two strings. 
Return -1 if there are no matching characters.

Note: Ignore blank spaces if there are any. Perform case sensitive string comparison wherever necessary.

Sample Input                           Expected output

"I like Python"
"Java is a very popular language"           lieyon
'''

'''def common_letters(string1,string2):
    l=[]
    string11=string1.replace(" ","")
    string22=string2.replace(" ","")
    for letter in string11:
        if letter in string22:
            l.append(letter)
    if len(l)!=0:
        return "".join(l)
    else:
        return -1

string1="I like Python"
string2="Java is a very popular language"
print(common_letters(string1,string2))'''


'''
Write a python function, encrypt_sentence() which accepts a message and encrypts it 
based on rules given below and returns the encrypted message.
Words at odd position -> Reverse It
Words at even position -> Rearrange the characters so that all consonants appear before the vowels and their order should not change

Note:
Assume that the sentence would begin with a word and there will be only a single space between the words.
Perform case sensitive string operations wherever necessary.

Sample Input                                 Expected Output

the sun rises in the east                  eht snu sesir ni eht stea
'''



'''vowels=['a','e','i','o','u']
def encrypt_sentence(sentence):
    l=[]
    list_sentc=sentence.split(" ")
    for index,word in enumerate(list_sentc):
        if (index+1)%2!=0:
            l.append(word[::-1])
        else:
            v=[]
            t=[]
            for letter in word:
                if letter not in vowels:
                    t.append(letter)
                else:
                    #pass
                    v.append(letter)
            t.extend(v)
            l.append("".join(t))
    return " ".join(l)

print(encrypt_sentence("the sun rises in the east  "))'''


'''
Write a python function, find_correct() which accepts a dictionary and returns a list as per the rules mentioned below.
The input dictionary will contain correct spelling of a word as key and the spelling provided by a contestant as the value.

The function should identify the degree of correctness as mentioned below:
CORRECT, if it is an exact match
ALMOST CORRECT, if no more than 2 letters are wrong
WRONG, if more than 2 letters are wrong or if length (correct spelling versus spelling given by contestant) mismatches.

and return a list containing the number of CORRECT answers, number of ALMOST CORRECT answers and number of WRONG answers. 
Assume that the words contain only uppercase letters and the maximum word length is 10.

Sample Input                                                    Expected Output

{"THEIR": "THEIR", "BUSINESS": "BISINESS",
"WINDOWS":"WINDMILL","WERE":"WEAR","SAMPLE":"SAMPLE"}              [2, 2, 1]
'''

'''word_dict={"THEIR": "THEIR", "BUSINESS": "BISINESS",
           "WINDOWS":"WINDMILL","WERE":"WEAR","SAMPLE":"SAMPLE"}

def find_correct(word_dict):
    correct,almost_correct,wrong=0,0,0
    for key,value in word_dict.items():
        if key==value:
            correct+=1
        else:
            if len(key)!=len(value):
                wrong+=1
                continue
            incorrect=0
            for i in range(min([len(key),len(value)])):
                if key[i]!=value[i]:
                    incorrect+=1
                    if incorrect>2:
                        wrong+=1
                        break
            if incorrect<=2:
                almost_correct+=1
    return [correct,almost_correct,wrong]

print(find_correct(word_dict))
    '''


'''
Care hospital wants to know the medical speciality visited by the maximum number of patients. 
Assume that the patient id of the patient along with the medical speciality visited by the patient is stored in a list. 
The details of the medical specialities are stored in a dictionary as follows:
{
"P":"Pediatrics",
"O":"Orthopedics",
"E":"ENT
} 

Write a function to find the medical speciality visited by the maximum number of patients and return the name of the speciality.
Note: 
Assume that there is always only one medical speciality which is visited by maximum number of patients.
Perform case sensitive string comparison wherever necessary.

Sample Input                                    Expected Output

[101,P,102,O,302,P,305,P]                       Pediatrics

[101,O,102,O,302,P,305,E,401,O,656,O]           Orthopedics

[101,O,102,E,302,P,305,P,401,E,656,O,987,E]        ENT
'''        

def max_visited(patients,medical_speciality):
    l=[]
    for key,value in medical_speciality.items():
        l.append(patients.count(key))
    maximum=tuple(medical_speciality.values())[l.index(max(l))]
    return maximum

patients=[101,'O',102,'O',302,'P',305,'E',401,'O',656,'O']
medical_speciality={"P":"Pediatrics","O":"Orthopedics","E":"ENT"} 
print(max_visited(patients,medical_speciality))



'''
Write python function, sms_encoding() which accepts a sentence and converts it 
into an abbreviated sentence to be sent as SMS and returns the abbreviated sentence. 

Rules are as follows: 
a. Spaces are to be retained as is 
b. Each word should be encoded separately

If a word has only vowels then retain the word as is

If a word has a consonant (at least 1) then retain only those consonants

Note: Assume that the sentence would begin with a word and there will be only a single space between the words.

Sample Input                                Expected Output

I love Python                                   I lv Pythn

MSD says I love cricket and tennis too          MSD sys I lv crckt nd tnns t

I will not repeat mistakes                      I wll nt rpt mstks


'''
