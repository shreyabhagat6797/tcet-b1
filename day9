
#linkedlist

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
    
    def get_data(self):
        return self.data
    
    def set_data(self,data):
        self.data = data

    def get_next(self):
        return self.next

    def set_next(self,next):
        self.next = next

class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add(self,data):
        new_node=Node(data)  #Create New Node
        if(self.__head is None): #If empty
            self.__head=self.__tail=new_node # set new node as head and tail
            return "Element added successfully : " + str(self.__tail.get_data()) + "\n"
        else: # If not empty 
            self.__tail.set_next(new_node) #set tail next to new node
            self.__tail=new_node # make new node as tail.
            return "Element added successfully : " + str(self.__tail.get_data()) + "\n"

    def display(self):
        temp=self.__head 
        while(temp is not None):
            print(temp.get_data()) # traverse through list and print the values.
            temp=temp.get_next()

    def find_node(self,data):
        temp = self.__head
        while temp is not None:
            if temp.get_data() == data:
                return temp
            temp = temp.next                
        return None

    def insert(self,data,data_before):
        new_node=Node(data) 
        if(data_before==None): # if node before not specified
            new_node.set_next(self.__head)  # set head as next node to new node
            self.__head=new_node # move head pointer to new node
            if(new_node.get_next()==None): #check if list was empty 
                self.__tail=new_node  # if empty then make new node as tail

        else: # If data before is specified.
            node_before=self.find_node(data_before) # find the node
            if(node_before is not None): # if found a node
                new_node.set_next(node_before.get_next()) #set next of new node to the next of node before
                node_before.set_next(new_node) # set the next of node_before to new node
                # if(new_node.get_next() is None):
                #     self.__tail=new_node
            else:
                print(data_before,"is not present in the Linked list") # if node bfore not found

    def insertAtBeginning(self,data):
        new_node = Node(data)
        new_node.set_next(self.__head)
        self.__head = new_node
        return "data inserted"




    def delete(self,data):
        node=self.find_node(data) # call find node function to find the data o be deleted
        if(node is not None): # if data found
            if(node==self.__head):  # If data is head elememt
                if(self.__head==self.__tail):  # head and tail points to same loc, i.e, only one element
                    self.__tail=None # make tail none
                self.__head=node.get_next() #make next element to head as Head
            else: # if not head element
                temp=self.__head 
                while(temp is not None): #travel till the element
                    if(temp.get_next()==node): #if next element is our data to be deleted
                        temp.set_next(node.get_next()) # Set before elemts next to node next
                        if(node==self.__tail): #If element deleted is tail or last
                            self.__tail=temp  #then set previous element as tail
                        node.set_next(None) # set nodes next to None
                        break # Break
                    temp=temp.get_next() # else travel next till element is found
            print("Element has been deleted Successfully...")
        else:
            print(data,"is not present in Linked list") 

if __name__ == "__main__":
    
    mylist = LinkedList()

    while True:

        print("\nSelect an option: ")
        print('1. Add Node ;','2. Insert Before;','3. Display.',
                '4. Find Node;','5. Delete Node ;','6. Insert At beginning ;')

        do = int(input("Enter your choice: "))

        if do == 1:
            data = int(input("Enter the element to be inserted: "))
            result = mylist.add(data)
            print(result)
            print(mylist.__str__())
        elif do == 2:
            data = int(input("Enter the element to be inserted: "))
            data_before = int(input("Enter element before"))
            result = mylist.insert(data,data_before)
            print(result)
            print(mylist.__str__())
        elif do == 3:
            mylist.display()
        elif do == 4:
            data = int(input("Enter Data to be searched: "))
            result = mylist.find_node(data)
            if result is not None:
                print(result)
            else:
                print("Data not Found")
        elif do == 5:
            data = int(input("Enter the element to be Deleted: "))
            mylist.delete(data)
        elif do == 6:
            data = int(input("Enter the element to be inserted: "))
            mylist.insertAtBeginning(data)
        else:
            print("wrong selection")
