'''
Given a queue of whole numbers. Write a python function to return a new queue which contains the evenly divisible numbers.
Note: A number is said to be evenly divisible if it is divisible by all the numbers in the given range without any remainder. 
Consider the range to be from 1 to 10 (both inclusive).
Assume that there will always be few elements in the input queue, which are evenly divisible by the numbers in the mentioned range.

Example:
Input Queue: 13983, 10080, 7113, 2520, 2500 (front - rear)
Output Queue: 10080, 2520 (front-rear)

'''

class Queue:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__rear=-1
        self.__front=0

    def get_max_size(self):
        return self.__max_size

    def is_full(self):
        if(self.__rear==self.__max_size-1):
                return True
        return False

    def is_empty(self):
        if(self.__front>self.__rear):
            return True
        return False

    def enqueue(self,data):
        if(self.is_full()):
            print("Queue is full!!!")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data

    def dequeue(self):
        if(self.is_empty()):
            print("Queue is empty!!!")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front, self.__rear+1):
            print(self.__elements[index])

def check_numbers(number_queue):
    solution_queue=Queue(5)
    while(not number_queue.is_empty()):
        status=0
        element=number_queue.dequeue()
        for i in range(1,11):
            if element%i!=0:
                status=1
                break
        if status==0:
            solution_queue.enqueue(element)
    return solution_queue

number_queue=Queue(5)
number_queue.enqueue(13938)
number_queue.enqueue(10080)
number_queue.enqueue(7113)
number_queue.enqueue(2520)
number_queue.enqueue(2500)
number_queue.display()
print()
solution_queue=check_numbers(number_queue)
solution_queue.display()

'''
1)	Given a stack of integers, 
write a python program that updates the input stack such that 
all occurrences of the smallest values are at the bottom of the stack, while the order of the other elements remains the same.

For example:
Input stack (top-bottom) :   5 66  5  8  7
Output:  66  8  7  5  5

'''
class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__top=-1

    def is_full(self):
        if(self.__top==self.__max_size-1):
            return True
        return False

    def is_empty(self):
        if(self.__top==-1):
            return True
        return False

    def push(self,data):
        if(self.is_full()):
            print("The stack is full!!")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def pop(self):
        if(self.is_empty()):
            print("The stack is empty!!")
        else:
            data= self.__elements[self.__top]
            self.__top-=1
            return data

    def display(self):
        if(self.is_empty()):
            print("The stack is empty")
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

    def get_max_size(self):
        return self.__max_size

def change_smallest_value(number_stack):
    l=[]
    while(not number_stack.is_empty()):
        l.append(number_stack.pop())
    minimum=min(l)
    counter=l.count(min(l))
    for i in range(counter):
        number_stack.push(minimum)
    for element in l[::-1]:
        if element!=minimum:
            number_stack.push(element)
    return number_stack

number_stack=Stack(5)
number_stack.push(7)
number_stack.push(8)
number_stack.push(5)
number_stack.push(66)
number_stack.push(5)

print("Initial stack:")
number_stack.display()

change_smallest_value(number_stack)
print("After the change:")
number_stack.display()



#linkedlist

class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
    
    def get_data(self):
        return self.data
    
    def set_data(self,data):
        self.data = data

    def get_next(self):
        return self.next

    def set_next(self,next):
        self.next = next

class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add(self,data):
        new_node=Node(data)  #Create New Node
        if(self.__head is None): #If empty
            self.__head=self.__tail=new_node # set new node as head and tail
            return "Element added successfully : " + str(self.__tail.get_data()) + "\n"
        else: # If not empty 
            self.__tail.set_next(new_node) #set tail next to new node
            self.__tail=new_node # make new node as tail.
            return "Element added successfully : " + str(self.__tail.get_data()) + "\n"

    def display(self):
        temp=self.__head 
        while(temp is not None):
            print(temp.get_data()) # traverse through list and print the values.
            temp=temp.get_next()

    def find_node(self,data):
        temp = self.__head
        while temp is not None:
            if temp.get_data() == data:
                return temp
            temp = temp.next                
        return None

    def insert(self,data,data_before):
        new_node=Node(data) 
        if(data_before==None): # if node before not specified
            new_node.set_next(self.__head)  # set head as next node to new node
            self.__head=new_node # move head pointer to new node
            if(new_node.get_next()==None): #check if list was empty 
                self.__tail=new_node  # if empty then make new node as tail

        else: # If data before is specified.
            node_before=self.find_node(data_before) # find the node
            if(node_before is not None): # if found a node
                new_node.set_next(node_before.get_next()) #set next of new node to the next of node before
                node_before.set_next(new_node) # set the next of node_before to new node
                # if(new_node.get_next() is None):
                #     self.__tail=new_node
            else:
                print(data_before,"is not present in the Linked list") # if node bfore not found

    def insertAtBeginning(self,data):
        new_node = Node(data)
        new_node.set_next(self.__head)
        self.__head = new_node
        return "data inserted"




    def delete(self,data):
        node=self.find_node(data) # call find node function to find the data o be deleted
        if(node is not None): # if data found
            if(node==self.__head):  # If data is head elememt
                if(self.__head==self.__tail):  # head and tail points to same loc, i.e, only one element
                    self.__tail=None # make tail none
                self.__head=node.get_next() #make next element to head as Head
            else: # if not head element
                temp=self.__head 
                while(temp is not None): #travel till the element
                    if(temp.get_next()==node): #if next element is our data to be deleted
                        temp.set_next(node.get_next()) # Set before elemts next to node next
                        if(node==self.__tail): #If element deleted is tail or last
                            self.__tail=temp  #then set previous element as tail
                        node.set_next(None) # set nodes next to None
                        break # Break
                    temp=temp.get_next() # else travel next till element is found
            print("Element has been deleted Successfully...")
        else:
            print(data,"is not present in Linked list") 

if __name__ == "__main__":
    
    mylist = LinkedList()

    while True:

        print("\nSelect an option: ")
        print('1. Add Node ;','2. Insert Before;','3. Display.',
                '4. Find Node;','5. Delete Node ;','6. Insert At beginning ;')

        do = int(input("Enter your choice: "))

        if do == 1:
            data = int(input("Enter the element to be inserted: "))
            result = mylist.add(data)
            print(result)
            print(mylist.__str__())
        elif do == 2:
            data = int(input("Enter the element to be inserted: "))
            data_before = int(input("Enter element before"))
            result = mylist.insert(data,data_before)
            print(result)
            print(mylist.__str__())
        elif do == 3:
            mylist.display()
        elif do == 4:
            data = int(input("Enter Data to be searched: "))
            result = mylist.find_node(data)
            if result is not None:
                print(result)
            else:
                print("Data not Found")
        elif do == 5:
            data = int(input("Enter the element to be Deleted: "))
            mylist.delete(data)
        elif do == 6:
            data = int(input("Enter the element to be inserted: "))
            mylist.insertAtBeginning(data)
        else:
            print("wrong selection")
