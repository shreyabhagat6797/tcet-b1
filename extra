#coorg fruit..... A4 from infytq

class FruitInfo:
    fruit_name_list=['Apple','Guava','Orange','Grape','Sweet Lime']
    fruit_price_list=[200,80,70,110,60]
    def get_fruit_price(fruit_name):
        if fruit_name.title() in FruitInfo.fruit_name_list:
            return FruitInfo.fruit_price_list[FruitInfo.fruit_name_list.index(fruit_name.title())]
        else:
            return -1

    def get_fruit_name_list():
        return FruitInfo.fruit_name_list

    def get_fruit_price_list():
        return FruitInfo.fruit_price_list

class Purchase:
    counter=101
    def __init__(self,customer,fruit_name,quantity):
        self.__purchase_id=None
        self.__customer=customer
        self.__fruit_name=fruit_name
        self.__quantity=quantity

    def get_purchase_id(self):
        return self.__purchase_id

    def get_customer(self):
        return self.__customer

    def get_quantity(self):
        return self.__quantity

    def calculate_price(self):
        each_fruit_price=FruitInfo.get_fruit_price(self.__fruit_name)
        if each_fruit_price>0:
            self.__purchase_id='P'+str(Purchase.counter)
            Purchase.counter+=1
            price=each_fruit_price*self.__quantity
            if each_fruit_price==max(FruitInfo.get_fruit_price_list()) and self.__quantity>1:
                price*=0.98
            if each_fruit_price==min(FruitInfo.get_fruit_price_list()) and self.__quantity>=5:
                price*=0.95
            if Customer.get_cust_type(self.__customer)=='Wholesale':
                price*=0.90
            return price
        else:
            return -1

class Customer:
    def __init__(self,customer_name,cust_type):
        self.__customer_name=customer_name
        self.__cust_type=cust_type

    def get_customer_name(self):
        return self.__customer_name

    def get_cust_type(self):
        return self.__cust_type

c=Customer("ABC","Wholesale")
p=Purchase(c,"Orange",5)
print(p.calculate_price())


#apparel..... A4 from infytq 

class Apparel:
    counter=100
    def __init__(self,price,item_type):
        self.__price=price
        self.__item_type=item_type
        self.__item_id=item_type[0].upper()+str(Apparel.counter+1)
        Apparel.counter+=1

    def get_item_id(self):
        return self.__item_id

    def get_item_type(self):
        return self.__item_type

    def get_price(self):
        return self.__price

    def set_price(self,price):
        self.__price=price

    def calculate_price(self):
        self.__price*=1.05

class Cotton(Apparel):
    def __init__(self,price,discount):
        Apparel.__init__(self,price,"Cotton")
        self.__discount=discount

    def get_discount(self):
        return self.__discount

    def calculate_price(self):
        Apparel.calculate_price(self)
        price=Apparel.get_price(self)
        price*=(1-((self.__discount)/100))
        price*=1.05
        Apparel.set_price(self,price)
        return price

class Silk(Apparel):
    def __init__(self,price):
        Apparel.__init__(self,price,"Silk")
        self.__points=0

    def calculate_price(self):
        Apparel.calculate_price(self)
        price=self.get_price()
        if price>10000:
            self.__points+=10
        else:
            self.__points+=3
        price*=1.10
        Apparel.set_price(self,price)
        print(self.__points)
        return price

c=Cotton(1350,35)
s=Silk(1320)
print("Cotton")
print(c.calculate_price())
print("Silk")
print(s.calculate_price())


'''
Alice, a school teacher, has decided to take her 20 students to an exhibition. She got the tickets a week before (T1 to T20) and 
she was informed that students will be allowed only in groups of 10 inside the exhibition hall.
On the day of exhibition, few students did not turn up. 
So the teacher followed the below strategy to identify the first 10 students who were sent as group-1. 

Suppose the ticket id of the students who turned up on that day is as follows:
T20, T5, T10, T1, T2, T8, T16, T17, T9, T4, T12, T13, T18
She made the students stand in a line in increasing order of their ticket numbers. 
They were asked to leave a vacant position, in case a student has not turned up.   
Ex: T1, T2, V, T4, T5, V, V, T8, T9, T10, V, T12, T13, V, V, T16, T17, T18, V, T20 where V - indicates vacant position.

Grouped them into 2 groups of 10 each including vacant positions.
Ex: Group – 1 (T1, T2, V, T4, T5, V, V, T8, T9, T10), Group – 2 (V, T12, T13, V, V, T16, T17, T18, V, T20)
Filled the vacant positions with the students from the next group as shown in the example below.
Ex: Group – 1 (T1, T2, T12, T4, T5, T13, T16, T8, T9, T10) Group -2 (T17, T18, T20)
Write a python function which accepts the unsorted ticket id list and 
returns the list of ticket ids of the ten students who were finally sent inside as part of Group-1.
 
Sample Input	                                                    Expected Output
['T20','T5','T10','T1','T2','T8','T16','T17',
'T9','T4','T12','T13', 'T18']	                        ['T1', 'T2', 'T12', 'T4', 'T5', 'T13', 'T16', 'T8', 'T9', 'T10']

'''

def arrange_tickets(ticket_list):
    new_list=[]
    for i in range(1,21):
        if "T"+str(i) in ticket_list:
            new_list.append("T"+str(i))
        else:
            if i<=10:
                new_list.append("V")
    print(new_list)
    counter=10
    for index,ticket in enumerate(new_list):
        if ticket=="V" and index<=10:
            new_list[index]=new_list[counter]
            counter+=1
    return new_list[:10]

ticket_list=['T20','T5','T10','T1','T2','T8','T16','T17','T9','T4','T12','T13', 'T18']
print("Ticket ids of all available students:")
print(ticket_list)
a=arrange_tickets(ticket_list)
print()
print("Ticket ids of the 10 students in group 1:")
print(a)

'''
The International Cricket Council (ICC) wanted to do some analysis of international cricket matches held in last 10 years. 
Given a list containing match details as shown below:
[match_detail1,match_detail2……]
Format of each match_detail in the list is as shown below:
country_name : championship_name : total_number_of_matches_played : number_of_matches_won

Example: AUS:CHAM:5:2 means Australia has participated in Champions Trophy 5 times and have won 2 times.

Write a python program which performs the following:
find_matches (country_name): Accepts the country_name and returns the list of details of matches played by that country.

max_wins(): Returns a dictionary containing the championship name as the key and 
the list of country/countries which have won the maximum number of matches in that championship as the value.

find_winner(country1,country2): Accepts name of two countries and 
returns the country name which has won more number of matches in all championships. If both have won equal number of matches, return "Tie".

Perform case sensitive string comparison wherever necessary.
match_list – ['ENG:WOR:2:0', 'AUS:CHAM:5:2', 'PAK:T20:5:1', 'AUS:WOR:2:1', 'SA:T20:5:0', 
'IND:T20:5:3', 'PAK:WOR:2:0', 'SA:WOR:2:0', 'SA:CHAM:5:1', 'IND:WOR:2:1']
 
Sample Input	                               Expected Output
find_matches ("AUS")	                   ['AUS':CHAM:5:2','AUS:WOR:2:1']
max_wins()	                               {'WOR': ['AUS', 'IND'], 'CHAM': ['AUS'], 'T20': ['IND']}
find_winner("AUS","IND")	                IND

'''

def find_matches(country_name):
    l=[]
    for match in match_list:
        detail=match.split(":")
        if detail[0] == country_name:
            l.append(match)      
    return l

def find_winner(country1,country2):
    count1,count2=0,0
    for match in match_list:
        detail = match.split(":")
        if detail[0] == country1:
            count1+=int(detail[3])
        if detail[0] == country2:
            count2+=int(detail[3])
    if count1==count2:
        return "Tie"
    elif count1>count2:
        return country1
    else:
        return country2

def max_wins():
    dictionary={}
    for match in match_list:
        detail = match.split(":")
        if detail[1] not in dictionary.keys():
            dictionary[detail[1]]=None
        if dictionary[detail[1]]==None:
            dictionary[detail[1]]=int(detail[3])
        elif dictionary[detail[1]]>=0:
            if dictionary[detail[1]]<int(detail[3]):
                dictionary[detail[1]]=int(detail[3])
    temp=dictionary.copy()
    for key, values in dictionary.items():
        dictionary[key]=[]
    for match in match_list:
        detail = match.split(":")
        if int(detail[3])==temp[detail[1]]:
            dictionary[detail[1]].append(detail[0])
    return dictionary

match_list=['AUS:T20:5:3', 'IND:CHAM:5:3', 'AUS:WOR:2:0', 'CAN:CHAM:5:1', 'ENG:WOR:2:0', 
            'IND:T20:6:4', 'PAK:T20:4:3', 'IND:WOR:5:3', 'AUS:CHAM:1:0', 'PAK:CHAM:5:1', 
            'SA:CHAM:5:2', 'SA:T20:5:0', 'PAK:WOR:2:0']

print("The match status list details are:")
print(match_list)
print(find_matches("AUS"))
print(max_wins())
