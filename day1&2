'''
Write a python program to find and display the product of three positive integer values based on the rule mentioned below:

It should display the product of the three values except when one of the integer value is 7. 
In that case, 7 should not be included in the product and the values to its left also should not be included.
If there is only one value to be considered, display that value itself. If no values can be included in the product, display -1.

Note: Assume that if 7 is one of the positive integer values, then it will occur only once. Refer the sample I/O given below.

Sample Input                       Expected Output

1, 5, 3                               15

3, 7,8                                8

7, 4, 3                               12

1, 5, 7                              -1
'''

'''def find_product(num1,num2,num3):
    l=[]
    l.extend([num1,num2,num3])
    product=1
    if 7 in l:
        i=l.index(7)
        if i is (len(l)-1):
            return -1
    else:
        i=-1
    for index in range(i+1,len(l)):
        product=product*l[index]
    return product

product=find_product(7,2,4)
print(product)'''

'''
Write a python function to check whether three given numbers can form the sides of a triangle. 
Hint: Three numbers can be the sides of a triangle if none of the numbers are greater than or equal to the sum of the other two numbers.
'''
'''
if n1>=n2+n3 or n2>=n3+n1 or n3>=n2+n1
print  triangle cannot be formed
else
print   triangle can be formed
'''
'''
def triangle(num1,num2,num3):
    l=[num1,num2,num3]
    flag=True
    for n in l:
        if n >= l[(l.index(n)+1)%3]+l[(l.index(n)+2)%3]:
            flag=False
            break
    return flag

print(triangle(1,2,3))
'''
'''
You have x no. of 5 rupee coins and y no. of 1 rupee coins. You want to purchase an item for amount z. 
The shopkeeper wants you to provide exact change. You want to pay using minimum number of coins.
 How many 5 rupee coins and 1 rupee coins will you use? If exact change is not possible then display -1.

Sample Input                                                                             Expected Output

Available Rs. 1 coins        Available Rs. 5 notes          Amount to be made      Rs. 1 coins needed     Rs. 5 notes needed
       2                            4                           21                      1                         4

      11                            2                            11                     1                           2
      
      3                             3                            19                      -1
'''


'''
def amount(rupees_to_make,no_of_five,no_of_one):
    five_needed=0
    one_needed=0
    five_needed=int(rupees_to_make/5)
    one_needed=rupees_to_make%5
    if five_needed<=no_of_five and one_needed<=no_of_one:
        print("No of five: ",five_needed)
        print("No of one: ",one_needed)
    elif five_needed>no_of_five:
        total=no_of_five*5
        one_needed=rupees_to_make-total
        if one_needed<=no_of_one:
            print("no of five: ",no_of_five)
            print("no of one: ",one_needed)
        else:
            print(-1)
    else:
        print(-1)

amount(21,4,2)
amount(11,2,11)
amount(19,3,3)
amount(20,5,1)
'''

'''
Write a python program to solve a classic ancient Chinese puzzle.

We count 35 heads and 94 legs among the chickens and rabbits in a farm. 
How many rabbits and how many chickens do we have?

Sample Input                                Expected Output

heads-150 legs-400                                100 50

heads-3 legs-11                                No solution

heads-3 legs-12                                     0 3

heads-5 legs-10                                     5 0
'''

'''
def solve(heads,legs):
    chicken_count=0
    rabbit_count=0
    if legs%2==0:
        rabbit_count=(legs//2)-heads
        chicken_count=heads-rabbit_count
        if rabbit_count<0 or chicken_count<0:
            print("No solution")
        else:
            print(chicken_count,rabbit_count)
    else:
        print("No solution")

solve(150,400)
solve(3,11)
solve(3,12)
solve(150,0)
'''

'''
FoodCorner home delivers vegetarian and non-vegetarian combos to its customer based on order.
A vegetarian combo costs Rs.120 per plate and a non-vegetarian combo costs Rs.150 per plate.
Their non-veg combo is really famous that they get more orders for their non-vegetarian combo than the vegetarian combo.
Apart from the cost per plate of food, customers are also charged for home delivery 
based on the distance in kms from the restaurant to the delivery point. The delivery charges are as mentioned below:

Distance in kms          Delivery charge in Rs per km

For first 3kms                      0

For next 3kms                       3

For the remaining                   6

Given the type of food, quantity (no. of plates) and the distance in kms from the restaurant to the delivery point, 
write a python program to calculate the final bill amount to be paid by a customer. 
The below information must be used to check the validity of the data provided by the customer: 
Type of food must be ‘V’ for vegetarian and ‘N’ for non-vegetarian.
Distance in kms must be greater than 0.
Quantity ordered should be minimum 1.
If any of the input is invalid, the bill amount should be considered as -1.
'''

def bill(food_type,quantity,distance):
    bill_amount=0
    deliver_charge=0
    if food_type=="V" or food_type=="N":
        if quantity>=1 and distance>0:
            if food_type=="V":
                 bill_amount=quantity*120
            elif food_type=="N":
                bill_amount=quantity*150
            if distance>3 and distance<=6:
                deliver_charge=deliver_charge+(distance-3)*3
            elif distance>6:
                deliver_charge=deliver_charge+(distance-6)*6+9
            bill_amount=bill_amount+deliver_charge
            print(bill_amount) 
        else:
            print(-1)
    else:
        print(-1)

bill("N",1,4)


'''
Weekly Salary
Write a function that takes a list of hours and returns the total weekly salary.
•	The input list hours is listed sequentially, ordered from Monday to Sunday.
•	A worker earns $10 an hour for the first 8 hours.
•	For every overtime hour, he earns $15.
•	On weekends, the employer pays double the usual rate, regardless how many hours were worked previously that week. 
For instance, 10 hours worked on a weekday would pay 80+30 = $110, but on a weekend it would pay 160+60 = $220.

Examples
weekly_salary([8, 8, 8, 8, 8, 0, 0]) ➞ 400

weekly_salary([10, 10, 10, 0, 8, 0, 0]) ➞ 410

'''
