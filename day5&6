
'''
Write python function, sms_encoding() which accepts a sentence and converts it 
into an abbreviated sentence to be sent as SMS and returns the abbreviated sentence. 

Rules are as follows: 
a. Spaces are to be retained as is 
b. Each word should be encoded separately

If a word has only vowels then retain the word as is
If a word has a consonant (at least 1) then retain only those consonants

Note: Assume that the sentence would begin with a word and there will be only a single space between the words.

Sample Input                                Expected Output

I love Python                                   I lv Pythn

MSD says I love cricket and tennis too          MSD sys I lv crckt nd tnns t

I will not repeat mistakes                      I wll nt rpt mstks


'''

'''vowels=['a','e','i','o','u']
def sms_encoding(data):
    temp=[]
    l=data.split(" ")
    for word in l:
        temp_word=[]
        for letter in word:
            if letter.lower() not in vowels:
                temp_word.append(letter)
        if len(temp_word)==0:
            temp_word.append(word)
        temp.append("".join(temp_word))
    return " ".join(temp)

data="MISSISIPI"
print(sms_encoding(data))'''




'''
Write a recursive function, is_palindrome() to find out whether a string is a palindrome or not. 
The function should return true, if it is a palindrome. Else it should return false. 

Note- Perform case insensitive operations wherever necessary.
'''

'''def palidrome(word):
    if word[::-1].lower()==word.lower():
        return True
    else:
        return False

word=palidrome("Madam")
if(word):
    print("it is palindrome")
else:
    print("not a palidrome")'''

#OOP
'''student qualification '''

'''student_id_counter=1
class Student:
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None

    def validate_marks(self):
        if self.__marks>=0 and self.__marks<=100:
            return True 
        else:
            return False

    def validate_age(self):
        if self.__age>20:
            return True
        else:
            return False

    def check_qualification(self):
        if self.validate_marks() and self.validate_age():
            if self.__marks>=65:
                return True
        return False

    def set_marks(self,marks):
        self.__marks=marks

    def get_marks(self):
        return self.__marks

    def set_age(self,age):
        self.__age=age

    def get_age(self):
        return self.__age

    def set_student_id(self):
        global student_id_counter
        self.__student_id=student_id_counter
        student_id_counter+=1

    def get_student_id(self):
        return self.__student_id

s=Student()
s.set_student_id()
print(s.get_student_id())
s.set_age(21)
print(s.get_age())
s.set_marks(70)
print(s.get_marks())
print(s.check_qualification())'''

'''
previous continued
'''



'''courses={1001:25575,1002:15500}

class Student:
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None
        self.__course_id=None
        self.__fees=None

    def validate_marks(self):
        if self.__marks>=0 and self.__marks<=100:
            return True 
        else:
            return False

    def validate_age(self):
        if self.__age>20:
            return True
        else:
            return False

    def check_qualification(self):
        if self.validate_marks() and self.validate_age():
            if self.__marks>=65:
                return True
        return False

    def choose_course(self,course_id):
        if course_id in courses.keys():
            self.__course_id=course_id
            if self.__marks>=85:
                self.__fees=courses[course_id]*0.75
                print("Fees : ",self.__fees)
                return True
            else:
                return False
        else:
            return False
            
    def set_marks(self,marks):
        self.__marks=marks

    def get_marks(self):
        return self.__marks

    def set_age(self,age):
        self.__age=age

    def get_age(self):
        return self.__age

    def set_student_id(self,student_id):
        self.__student_id=student_id

    def get_student_id(self):
        return self.__student_id

    def get_course_id(self):
        return self.__course_id
    
    def get_fees(self):
        return self.__fees

s=Student()
s.set_student_id(10)
s.set_marks(87)
s.set_age(25)
if(s.check_qualification()):
    print("student is qualified")
    if (s.choose_course(1002)):
        print("course is alloted")
    else:
        print("invalid course")
else:
    print("student not qualified")
'''

'''
WeCare insurance company wants to calculate premium of vehicles.
Vehicles are of two types â€“ "Two Wheeler" and "Four Wheeler". Each vehicle is identified by vehicle id, type, cost and premium amount.
Premium amount is 2% of the vehicle cost for two wheelers and 6% of the vehicle cost for four wheelers. 
Calculate the premium amount and display the vehicle details.

Identify the class name and attributes to represent vehicles. 

calculate_premium()
vehicle_cost     #v
TwoWheeler
vehicle_type     #v
vehicle_id       #v
Vehicle
premium_amount   #v
FourWheeler
premium_percentage
calculate_vehicle_cost()
__init__()
display_vehicle_details()
Write a Python program to implement the class chosen with its attributes and methods.

Note:
Consider all instance variables to be private and methods to be public
Include getter and setter methods for all instance variables
Display appropriate error message, if the vehicle type is invalid
Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.
'''
        
'''class Vehicle:
    def __init__(self):
        self.__vehicle_cost=None
        self.__vehicle_id=None
        self.__vehicle_type=None
        self.__premium_amount=None

    def set_vehicle_cost(self,vehicle_cost):
        self.__vehicle_cost=vehicle_cost
    
    def get_vehicle_cost(self):
        return self.__vehicle_cost

    def set_vehicle_id(self,vehicle_id):
        self.__vehicle_id=vehicle_id

    def get_vehicle_id(self):
        return self.__vehicle_id

    def set_vehicle_type(self,vehicle_type):
        if check_type(vehicle_type):
            self.__vehicle_type=vehicle_type
        else:
            return "invalid vehicle"

    def get_vehicle_type(self):
        return self.__vehicle_type

    def set_premium_amount(self,premium_amount):
        self.__premium_amount=premium_amount

    def get_premium_amount(self):
        return self.__premium_amount

    def calculate_premium(self):
        if self.__vehicle_type=="TwoWheeler":
            self.__premium_amount=self.__vehicle_cost*(2/100)
        elif self.__vehicle_type=="FourWheeler":
            self.__premium_amount=self.__vehicle_cost*(6/100)
        else:
            print("invalid vehicle type")

    def display_vehicle_details(self):
        print("vehicle type: ",self.__vehicle_type)
        print("vehicle id: ",self.__vehicle_id)
        print("vehicle cost: ",self.__vehicle_cost )
        print("vhicle premium amount: ",self.__premium_amount)

def check_type(type):
    vehicle_type=["TwoWheeler","FourWheeler"]
    if type not in vehicle_type:
        return 0
    return 1

v1=Vehicle()
v1.set_vehicle_id(10)
v1.set_vehicle_type("TwoWheeler")
v1.set_vehicle_cost(105000)
v1.calculate_premium()
v1.display_vehicle_details()
'''

'''
TechWorld, a technology training center, wants to allocate courses for instructors.
An instructor is identified by name, technology skills, experience and average feedback.
An instructor is allocated a course, if he/she satisfies the below two conditions:

eligibility criteria:
if experience is more than 3 years, average feedback should be 4.5 or more
if experience is 3 years or less, average feedback should be 4 or more
he/she should posses the technology skill for the course
Identify the class name and attributes from the list of options below to represent instructors.

check_eligibility()
avg_feedback
experience
instructor_name
allocate_course()
allocate_course(technolody)
__init__()
Instructor
calculate_avg_feedback()
technology_skill
Write a Python program to implement the class chosen with its attributes and methods.

Note:

Consider all instance variables to be private and methods to be public
An instructor may have multiple technology skills, so consider instance variable, technology_skill to be a list
check_eligibility(): Return true if eligibility criteria is satisfied by the instructor. Else, return false
allocate_course(technology): Return true if the course which requires the given technology can be allocated to the instructor. 
Else, return false
Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.
'''

'''
Royal orchid florist
'''

flowers=["Orchid","Rose","Jasmine"]
levels=[15,25,40]
class Flower:
    def __init__(self):
        self.__flower_name=None
        self.__price_per_kg=None
        self.__stock_available=None

    def set_flower_name(self,flower_name):
        self.__flower_name=flower_name

    def get_flower__name(self):
        return self.__flower_name

    def set_price_per_kg(self,price_per_kg):
        self.__price_per_kg=price_per_kg

    def get_price_per_kg(self):
        return self.__price_per_kg

    def set_stock_available(self,stock_available):
        self.__stock_available=stock_available

    def get_stock_available(self):
        return self.__stock_available

    def validate_flower(self):
        if self.__flower_name in flowers:
            return True
        else:
            return False

    def validate_stock(self,required_quantity):
        if self.__stock_available>=required_quantity:
            return True
        else:
            return False

    def sell_flower(self,required_quantity):
        if self.validate_flower() and self.validate_stock(required_quantity):
            self.__stock_available-=required_quantity
            print("stock: ",self.__stock_available)
            return True
        else:
            return False

    def check_level(self):
        if self.validate_flower():
            flower_level=levels[flowers.index(self.__flower_name)]
            if self.__stock_available<flower_level:
                return True
        else:
            return False

f=Flower()
f.set_flower_name("Rose")
f.set_price_per_kg(200)
f.set_stock_available(24)
print(f.get_flower__name())
print(f.get_price_per_kg())
print(f.get_stock_available())
print(f.validate_stock(20))
print(f.sell_flower(20))
print(f.check_level())


'''
Care hospital wants to calculate the bill amount to be paid by patients visiting the hospital. 
Bill amount includes consultation fees and price of medicines purchased from their pharmacy.

Write a Python program to implement the class diagram given below.

                                                                            
Method description:

calculate_bill_amount(consultation_fees, quantity_list, price_list): 
Accept consultation_fees, quantity_list (quantities of medicines purchased) and price_list (price per quantity of medicines purchased)

Calculate total bill amount to be paid by the patient. Bill amount includes consultation fees and price of medicines
Initialize attribute, bill_amount with the total bill amount
Note: quantity_list and price_list have one-to-one correspondence. 
Quantity and price per quantity of 1st medicine purchased by the patient is present at 0th index of both lists, 
2nd medicine is present at 1st index and so on.

For testing:

Create objects of Bill class
Invoke calculate_bill_amount(consultation_fees, quantity_list, price_list) method on Bill object by passing consultation fees, 
quantity list and price list
Display bill id, patient name and bill amount
'''

class Bill:
    def __init__(self, bill_id, patient_name):
        self.__bill_id=bill_id
        self.__patient_name=patient_name
        self.__bill_amount=0
    def get_bill_id(self):
        return self.__bill_id
    def get_patient_name(self):
        return self.__patient_name
    def get_bill_amount(self):
        return self.__bill_amount
    def calculate_bill_amount(self, consultation_fees, quantity_list, price_list):
        
        for i in range(len(quantity_list)):
            self.__bill_amount += (quantity_list[i]*price_list[i])
        self.__bill_amount += consultation_fees
        print(self.get_bill_id())
        print(self.get_patient_name())
        #print(self.get_bill_amount())
a=Bill(1,"Omkar")
a.calculate_bill_amount(50,[2,3],[1,2])
print(a.get_bill_amount())
